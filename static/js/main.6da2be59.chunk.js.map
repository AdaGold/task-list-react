{"version":3,"sources":["components/Task.js","components/TaskList.js","components/AddTaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["Task","id","text","done","onClickCallback","onDeleteCallback","buttonClass","className","onClick","data-testid","icon","faTimes","TaskList","tasks","onTaskClickCallback","onTaskDeleteCallback","map","task","getTaskListJSX","AddTaskForm","onAddTaskCallback","useState","completed","taskData","setTaskData","handleChange","event","console","log","newTaskData","target","name","value","onFormSubmit","preventDefault","onSubmit","htmlFor","type","onChange","URL","App","setTasks","getTasks","axios","get","then","res","newTasks","data","title","is_complete","catch","err","useEffect","taskId","routeWord","patch","delete","response","filter","error","completed_at","Date","description","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6da2be59.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './Task.css';\n\nconst Task = ({ id, text, done, onClickCallback, onDeleteCallback }) => {\n  const buttonClass = done ? 'tasks__item__toggle--completed' : '';\n\n  return (\n    <li className=\"tasks__item\">\n      <button\n        className={`tasks__item__toggle ${buttonClass}`}\n        onClick={() => onClickCallback(id)}\n      >\n        {text}\n      </button>\n      <button\n        className=\"tasks__item__remove button alert pull-right\"\n        onClick={() => onDeleteCallback(id)}\n        data-testid={`delete button ${id}`}\n      >\n        <i className=\"fa fa-times\">\n          <FontAwesomeIcon icon={faTimes} />\n        </i>\n      </button>\n    </li>\n  );\n};\n\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  onDeleteCallback: PropTypes.func.isRequired,\n};\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\nimport './TaskList.css';\n\nconst TaskList = ({ tasks, onTaskClickCallback, onTaskDeleteCallback }) => {\n  const getTaskListJSX = (tasks, onTaskClickCallback, onTaskDeleteCallback) => {\n    return tasks.map((task) => {\n      return (\n        <Task\n          key={task.id}\n          id={task.id}\n          text={task.text}\n          onClickCallback={onTaskClickCallback}\n          onDeleteCallback={onTaskDeleteCallback}\n          done={task.done}\n        />\n      );\n    });\n  };\n  return (\n    <ul className=\"tasks__list no-bullet\">\n      {getTaskListJSX(tasks, onTaskClickCallback, onTaskDeleteCallback)}\n    </ul>\n  );\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n      done: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n\n  onTaskClickCallback: PropTypes.func.isRequired,\n  onTaskDeleteCallback: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddTaskForm = ({ onAddTaskCallback }) => {\n  const [taskData, setTaskData] = useState({ text: '', completed: 'false' });\n\n  const handleChange = (event) => {\n    console.log(event);\n    const newTaskData = {\n      ...taskData,\n    };\n\n    newTaskData[event.target.name] = event.target.value;\n    setTaskData(newTaskData);\n  };\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    console.log('adding task');\n    console.log(event);\n\n    onAddTaskCallback({\n      text: taskData.text,\n      completed: taskData.completed === 'true',\n    });\n    setTaskData({ text: '', completed: 'false' });\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <h2>New Task</h2>\n      <div>\n        <label htmlFor=\"text\">Task Name</label>\n        <input\n          type=\"text\"\n          id=\"text\"\n          name=\"text\"\n          onChange={handleChange}\n          value={taskData.text}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"completed\">Completed?</label>\n        <select\n          id=\"completed\"\n          name=\"completed\"\n          onChange={handleChange}\n          value={taskData.completed}\n        >\n          <option value=\"true\">Yes</option>\n          <option value=\"false\">No</option>\n        </select>\n      </div>\n      <div>\n        <button onClick={onFormSubmit} className=\"button button-primary\">\n          Add Task\n        </button>\n      </div>\n    </form>\n  );\n};\n\nAddTaskForm.propTypes = {\n  onAddTaskCallback: PropTypes.func.isRequired,\n};\n\nexport default AddTaskForm;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport TaskList from './components/TaskList';\nimport AddTaskForm from './components/AddTaskForm';\n\nconst URL = 'https://adas-task-list.herokuapp.com/tasks';\n\nconst App = () => {\n  const [tasks, setTasks] = useState([]);\n  console.log(tasks);\n\n  const getTasks = () => {\n    axios\n      .get(URL)\n      .then((res) => {\n        const newTasks = res.data.map((task) => {\n          return {\n            id: task.id,\n            text: task.title,\n            done: task.is_complete,\n          };\n        });\n        setTasks(newTasks);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  const updateTask = (taskId) => {\n    const newTasks = tasks.map((task) => {\n      if (task.id === taskId) {\n        task.done = !task.done;\n        let routeWord = 'complete';\n        if (!task.done) {\n          routeWord = 'incomplete';\n        }\n        axios\n          .patch(`${URL}/${taskId}/${routeWord}`)\n          .then(() => console.log(`Marked ${routeWord}`))\n          .catch((err) => console.log(err));\n      }\n      return task;\n    });\n    setTasks(newTasks);\n  };\n\n  const deleteTask = (taskId) => {\n    axios\n      .delete(`${URL}/${taskId}`)\n      .then((response) => {\n        console.log(response);\n        const newTasks = tasks.filter((task) => task.id !== taskId);\n        setTasks(newTasks);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const addTask = (task) => {\n    const taskData = {\n      title: task.text,\n      // eslint-disable-next-line camelcase\n      completed_at: task.done ? new Date() : null,\n      description: '',\n    };\n\n    axios\n      .post(URL, taskData)\n      .then((response) => {\n        console.log(response);\n        getTasks();\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Ada&apos;s Task List</h1>\n      </header>\n      <main>\n        <div>\n          <TaskList\n            tasks={tasks}\n            onTaskClickCallback={updateTask}\n            onTaskDeleteCallback={deleteTask}\n          />\n        </div>\n        <div>\n          <AddTaskForm onAddTaskCallback={addTask} />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Add Foundation to index.js\nimport 'foundation-sites/dist/css/foundation.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}